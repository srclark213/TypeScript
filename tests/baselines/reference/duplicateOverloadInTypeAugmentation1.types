//// [tests/cases/compiler/duplicateOverloadInTypeAugmentation1.ts] ////

=== duplicateOverloadInTypeAugmentation1.ts ===
interface Array<T> {
    reduce(callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T,
>reduce : { (callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U>(callbackfn: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; (callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T; <U>(callbackfn: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; }

>callbackfn : (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T
>           : ^             ^^ ^^            ^^ ^^            ^^      ^^     ^^   ^^^^^ 
>accumulator : T
>              : ^
>currentValue : T
>             : ^
>currentIndex : number
>             : ^^^^^^
>array : T[]
>      : ^^^

        initialValue?: T): T;
>initialValue : T
>             : ^

    reduce<U>(callbackfn: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U,
>reduce : { (callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U_1>(callbackfn: (accumulator: U_1, currentValue: T, currentIndex: number, array: T[]) => U_1, initialValue: U_1): U_1; (callbackfn: (accumulator: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T; <U>(callbackfn: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; }

>callbackfn : (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U
>           : ^             ^^ ^^            ^^ ^^            ^^      ^^     ^^   ^^^^^ 
>accumulator : U
>              : ^
>currentValue : T
>             : ^
>currentIndex : number
>             : ^^^^^^
>array : T[]
>      : ^^^

        initialValue: U): U;
>initialValue : U
>             : ^
}
var a: Array<string>;
>a : string[]
>  : ^^^^^^^^

var r5 = a.reduce((x, y) => x + y);
>r5 : string
>   : ^^^^^^
>a.reduce((x, y) => x + y) : string
>                          : ^^^^^^
>a.reduce : { (callbackfn: (accumulator: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (accumulator: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (accumulator: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; (callbackfn: (accumulator: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue?: string): string; <U>(callbackfn: (accumulator: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }

>a : string[]
>  : ^^^^^^^^
>reduce : { (callbackfn: (accumulator: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (accumulator: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (accumulator: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; (callbackfn: (accumulator: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue?: string): string; <U>(callbackfn: (accumulator: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U; }

>(x, y) => x + y : (x: string, y: string) => string
>                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>y : string
>  : ^^^^^^
>x + y : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>y : string
>  : ^^^^^^

